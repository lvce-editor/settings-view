import type { SettingItem } from '../SettingItem/SettingItem.ts'
import * as InputName from '../InputName/InputName.ts'
import * as SettingItemType from '../SettingItemType/SettingItemType.ts'
import * as SettingStrings from '../SettingStrings/SettingStrings.ts'

export const getSettingItemsEditor = (): readonly SettingItem[] => {
  return [
    {
      id: 'editor.fontSize',
      heading: SettingStrings.fontSize(),
      description: SettingStrings.fontSizeDescription(),
      type: SettingItemType.Number,
      value: 15,
      category: InputName.TextEditorTab,
      validate(value): string {
        if (typeof value !== 'number') {
          return 'font size must be of type number'
        }
        const minFontSize = 10
        const maxFontSize = 100
        if (value < minFontSize) {
          return 'font size must be at least 10'
        }
        if (value > maxFontSize) {
          return 'font size must not be greater than 100'
        }
        return ''
      },
    },
    {
      id: 'editor.fontFamily',
      heading: SettingStrings.fontFamily(),
      description: SettingStrings.fontFamilyDescription(),
      type: SettingItemType.String,
      value: 'Fira Code',
      category: InputName.TextEditorTab,
    },
    {
      id: 'editor.wordWrap',
      heading: SettingStrings.wordWrap(),
      description: SettingStrings.wordWrapDescription(),
      type: SettingItemType.Enum,
      value: 'off',
      category: InputName.TextEditorTab,
      options: [
        {
          id: 'editor.on',
          label: 'On', // i18n
        },
        {
          id: 'editor.off',
          label: 'off', // i18n
        },
      ],
    },
    {
      id: 'editor.lineNumbers',
      heading: SettingStrings.lineNumbers(),
      description: SettingStrings.lineNumbersDescription(),
      type: SettingItemType.Enum,
      value: 'on',
      category: InputName.TextEditorTab,
      options: [
        {
          id: 'editor.on',
          label: 'On', // i18n
        },
        {
          id: 'editor.off',
          label: 'off', // i18n
        },
      ],
    },
    {
      id: 'editor.minimap',
      heading: SettingStrings.minimap(),
      description: SettingStrings.minimapDescription(),
      type: SettingItemType.Boolean,
      value: 'true',
      category: InputName.TextEditorTab,
    },
    {
      id: 'editor.scrollBeyondLastLine',
      heading: SettingStrings.scrollBeyondLastLine(),
      description: SettingStrings.scrollBeyondLastLineDescription(),
      type: SettingItemType.Boolean,
      value: 'false',
      category: InputName.TextEditorTab,
    },
    {
      id: 'editor.smoothScrolling',
      heading: SettingStrings.smoothScrolling(),
      description: SettingStrings.smoothScrollingDescription(),
      type: SettingItemType.Boolean,
      value: 'true',
      category: InputName.TextEditorTab,
    },
    {
      id: 'editor.cursorBlinking',
      heading: SettingStrings.cursorBlinking(),
      description: SettingStrings.cursorBlinkingDescription(),
      type: SettingItemType.String,
      value: 'blink',
      category: InputName.TextEditorTab,
    },
    {
      id: 'editor.cursorStyle',
      heading: SettingStrings.cursorStyle(),
      description: SettingStrings.cursorStyleDescription(),
      type: SettingItemType.String,
      value: 'line',
      category: InputName.TextEditorTab,
    },
    {
      id: 'editor.cursorWidth',
      heading: SettingStrings.cursorWidth(),
      description: SettingStrings.cursorWidthDescription(),
      type: SettingItemType.Number,
      value: '0',
      category: InputName.TextEditorTab,
    },
    {
      id: 'editor.tabSize',
      heading: SettingStrings.tabSize(),
      description: SettingStrings.tabSizeDescription(),
      type: SettingItemType.Number,
      value: '4',
      category: InputName.TextEditorTab,
      validate(value): string {
        if (typeof value !== 'number') {
          return 'font size must be of type number'
        }
        const minTabSize = 1
        const maxTabSize = 8
        if (value < minTabSize) {
          return `tab size must be at least ${minTabSize}`
        }
        if (value > maxTabSize) {
          return `tab size must not be greater than ${maxTabSize}`
        }
        return ''
      },
    },
    {
      id: 'editor.insertSpaces',
      heading: SettingStrings.insertSpaces(),
      description: SettingStrings.insertSpacesDescription(),
      type: SettingItemType.Boolean,
      value: 'true',
      category: InputName.TextEditorTab,
    },
    {
      id: 'editor.detectIndentation',
      heading: SettingStrings.detectIndentation(),
      description: SettingStrings.detectIndentationDescription(),
      type: SettingItemType.Boolean,
      value: 'true',
      category: InputName.TextEditorTab,
    },
    {
      id: 'editor.trimAutoWhitespace',
      heading: SettingStrings.trimAutoWhitespace(),
      description: SettingStrings.trimAutoWhitespaceDescription(),
      type: SettingItemType.Boolean,
      value: 'true',
      category: InputName.TextEditorTab,
    },
    {
      id: 'editor.largeFileOptimizations',
      heading: SettingStrings.largeFileOptimizations(),
      description: SettingStrings.largeFileOptimizationsDescription(),
      type: SettingItemType.Boolean,
      value: 'true',
      category: InputName.TextEditorTab,
    },
    {
      id: 'editor.renderWhitespace',
      heading: SettingStrings.renderWhitespace(),
      description: SettingStrings.renderWhitespaceDescription(),
      type: SettingItemType.String,
      value: 'selection',
      category: InputName.TextEditorTab,
    },
    {
      id: 'editor.renderControlCharacters',
      heading: SettingStrings.renderControlCharacters(),
      description: SettingStrings.renderControlCharactersDescription(),
      type: SettingItemType.Boolean,
      value: 'false',
      category: InputName.TextEditorTab,
    },
    {
      id: 'editor.renderLineHighlight',
      heading: SettingStrings.renderLineHighlight(),
      description: SettingStrings.renderLineHighlightDescription(),
      type: SettingItemType.String,
      value: 'line',
      category: InputName.TextEditorTab,
    },
    {
      id: 'editor.codeLens',
      heading: SettingStrings.codeLens(),
      description: SettingStrings.codeLensDescription(),
      type: SettingItemType.Boolean,
      value: 'true',
      category: InputName.TextEditorTab,
    },
    {
      id: 'editor.folding',
      heading: SettingStrings.folding(),
      description: SettingStrings.foldingDescription(),
      type: SettingItemType.Boolean,
      value: 'true',
      category: InputName.TextEditorTab,
    },
    {
      id: 'editor.showFoldingControls',
      heading: SettingStrings.showFoldingControls(),
      description: SettingStrings.showFoldingControlsDescription(),
      type: SettingItemType.String,
      value: 'mouseover',
      category: InputName.TextEditorTab,
    },
    {
      id: 'editor.unfoldOnClickAfterEnd',
      heading: SettingStrings.unfoldOnClickAfterEnd(),
      description: SettingStrings.unfoldOnClickAfterEndDescription(),
      type: SettingItemType.Boolean,
      value: 'false',
      category: InputName.TextEditorTab,
    },
    {
      id: 'editor.links',
      heading: SettingStrings.links(),
      description: SettingStrings.linksDescription(),
      type: SettingItemType.Boolean,
      value: 'true',
      category: InputName.TextEditorTab,
    },
    {
      id: 'editor.colorDecorators',
      heading: SettingStrings.colorDecorators(),
      description: SettingStrings.colorDecoratorsDescription(),
      type: SettingItemType.Boolean,
      value: 'true',
      category: InputName.TextEditorTab,
    },
    {
      id: 'editor.lightbulb',
      heading: SettingStrings.lightbulb(),
      description: SettingStrings.lightbulbDescription(),
      type: SettingItemType.Boolean,
      value: 'true',
      category: InputName.TextEditorTab,
    },
    {
      id: 'editor.codeActionsOnSave',
      heading: SettingStrings.codeActionsOnSave(),
      description: SettingStrings.codeActionsOnSaveDescription(),
      type: SettingItemType.Boolean,
      value: 'false',
      category: InputName.TextEditorTab,
    },
    {
      id: 'editor.formatOnPaste',
      heading: SettingStrings.formatOnPaste(),
      description: SettingStrings.formatOnPasteDescription(),
      type: SettingItemType.Boolean,
      value: 'false',
      category: InputName.TextEditorTab,
    },
    {
      id: 'editor.formatOnType',
      heading: SettingStrings.formatOnType(),
      description: SettingStrings.formatOnTypeDescription(),
      type: SettingItemType.Boolean,
      value: 'false',
      category: InputName.TextEditorTab,
    },
    {
      id: 'editor.acceptSuggestionOnCommitCharacter',
      heading: SettingStrings.acceptSuggestionOnCommitCharacter(),
      description: SettingStrings.acceptSuggestionOnCommitCharacterDescription(),
      type: SettingItemType.Boolean,
      value: 'true',
      category: InputName.TextEditorTab,
    },
    {
      id: 'editor.acceptSuggestionOnEnter',
      heading: SettingStrings.acceptSuggestionOnEnter(),
      description: SettingStrings.acceptSuggestionOnEnterDescription(),
      type: SettingItemType.String,
      value: 'on',
      category: InputName.TextEditorTab,
    },
    {
      id: 'editor.tabCompletion',
      heading: SettingStrings.tabCompletion(),
      description: SettingStrings.tabCompletionDescription(),
      type: SettingItemType.String,
      value: 'on',
      category: InputName.TextEditorTab,
    },
    {
      id: 'editor.wordBasedSuggestions',
      heading: SettingStrings.wordBasedSuggestions(),
      description: SettingStrings.wordBasedSuggestionsDescription(),
      type: SettingItemType.Boolean,
      value: 'true',
      category: InputName.TextEditorTab,
    },
    {
      id: 'editor.suggestOnTriggerCharacters',
      heading: SettingStrings.suggestOnTriggerCharacters(),
      description: SettingStrings.suggestOnTriggerCharactersDescription(),
      type: SettingItemType.Boolean,
      value: 'true',
      category: InputName.TextEditorTab,
    },
    {
      id: 'editor.quickSuggestions',
      heading: SettingStrings.quickSuggestions(),
      description: SettingStrings.quickSuggestionsDescription(),
      type: SettingItemType.Boolean,
      value: 'true',
      category: InputName.TextEditorTab,
    },
    {
      id: 'editor.parameterHints',
      heading: SettingStrings.parameterHints(),
      description: SettingStrings.parameterHintsDescription(),
      type: SettingItemType.Boolean,
      value: 'true',
      category: InputName.TextEditorTab,
    },
    {
      id: 'editor.autoClosingBrackets',
      heading: SettingStrings.autoClosingBrackets(),
      description: SettingStrings.autoClosingBracketsDescription(),
      type: SettingItemType.String,
      value: 'always',
      category: InputName.TextEditorTab,
    },
    {
      id: 'editor.autoClosingQuotes',
      heading: SettingStrings.autoClosingQuotes(),
      description: SettingStrings.autoClosingQuotesDescription(),
      type: SettingItemType.String,
      value: 'always',
      category: InputName.TextEditorTab,
    },
    {
      id: 'editor.autoClosingOvertype',
      heading: SettingStrings.autoClosingOvertype(),
      description: SettingStrings.autoClosingOvertypeDescription(),
      type: SettingItemType.String,
      value: 'auto',
      category: InputName.TextEditorTab,
    },
    {
      id: 'editor.autoClosingDelete',
      heading: SettingStrings.autoClosingDelete(),
      description: SettingStrings.autoClosingDeleteDescription(),
      type: SettingItemType.String,
      value: 'auto',
      category: InputName.TextEditorTab,
    },
    {
      id: 'editor.autoSurround',
      heading: SettingStrings.autoSurround(),
      description: SettingStrings.autoSurroundDescription(),
      type: SettingItemType.String,
      value: 'quotes',
      category: InputName.TextEditorTab,
    },
    {
      id: 'editor.bracketPairColorization',
      heading: SettingStrings.bracketPairColorization(),
      description: SettingStrings.bracketPairColorizationDescription(),
      type: SettingItemType.Boolean,
      value: 'true',
      category: InputName.TextEditorTab,
    },
    {
      id: 'editor.guides',
      heading: SettingStrings.guides(),
      description: SettingStrings.guidesDescription(),
      type: SettingItemType.Boolean,
      value: 'true',
      category: InputName.TextEditorTab,
    },
    {
      id: 'editor.dragAndDrop',
      heading: SettingStrings.dragAndDrop(),
      description: SettingStrings.dragAndDropDescription(),
      type: SettingItemType.Boolean,
      value: 'true',
      category: InputName.TextEditorTab,
    },
    {
      id: 'editor.copyWithSyntaxHighlighting',
      heading: SettingStrings.copyWithSyntaxHighlighting(),
      description: SettingStrings.copyWithSyntaxHighlightingDescription(),
      type: SettingItemType.Boolean,
      value: 'true',
      category: InputName.TextEditorTab,
    },
    {
      id: 'editor.multiCursorModifier',
      heading: SettingStrings.multiCursorModifier(),
      description: SettingStrings.multiCursorModifierDescription(),
      type: SettingItemType.String,
      value: 'alt',
      category: InputName.TextEditorTab,
    },
    {
      id: 'editor.multiCursorPaste',
      heading: SettingStrings.multiCursorPaste(),
      description: SettingStrings.multiCursorPasteDescription(),
      type: SettingItemType.String,
      value: 'full',
      category: InputName.TextEditorTab,
    },
    {
      id: 'editor.occurrencesHighlight',
      heading: SettingStrings.occurrencesHighlight(),
      description: SettingStrings.occurrencesHighlightDescription(),
      type: SettingItemType.Boolean,
      value: 'true',
      category: InputName.TextEditorTab,
    },
    {
      id: 'editor.selectionHighlight',
      heading: SettingStrings.selectionHighlight(),
      description: SettingStrings.selectionHighlightDescription(),
      type: SettingItemType.Boolean,
      value: 'true',
      category: InputName.TextEditorTab,
    },
    {
      id: 'editor.semanticHighlighting',
      heading: SettingStrings.semanticHighlighting(),
      description: SettingStrings.semanticHighlightingDescription(),
      type: SettingItemType.Boolean,
      value: 'true',
      category: InputName.TextEditorTab,
    },
    {
      id: 'editor.tokenColorCustomizations',
      heading: SettingStrings.tokenColorCustomizations(),
      description: SettingStrings.tokenColorCustomizationsDescription(),
      type: SettingItemType.String,
      value: '{}',
      category: InputName.TextEditorTab,
    },
    {
      id: 'editor.workbenchColorCustomizations',
      heading: SettingStrings.workbenchColorCustomizations(),
      description: SettingStrings.workbenchColorCustomizationsDescription(),
      type: SettingItemType.String,
      value: '{}',
      category: InputName.TextEditorTab,
    },
    {
      id: 'editorColorCustomizations',
      heading: SettingStrings.editorColorCustomizations(),
      description: SettingStrings.editorColorCustomizationsDescription(),
      type: SettingItemType.String,
      value: '{}',
      category: InputName.TextEditorTab,
    },
    {
      id: 'editor.diffEditor',
      heading: SettingStrings.diffEditor(),
      description: SettingStrings.diffEditorDescription(),
      type: SettingItemType.Boolean,
      value: 'true',
      category: InputName.TextEditorTab,
    },
    {
      id: 'editor.diffWordWrap',
      heading: SettingStrings.diffWordWrap(),
      description: SettingStrings.diffWordWrapDescription(),
      type: SettingItemType.String,
      value: 'inherit',
      category: InputName.TextEditorTab,
    },
    {
      id: 'editor.diffCodeLens',
      heading: SettingStrings.diffCodeLens(),
      description: SettingStrings.diffCodeLensDescription(),
      type: SettingItemType.Boolean,
      value: 'true',
      category: InputName.TextEditorTab,
    },
    {
      id: 'editor.diffRenderSideBySide',
      heading: SettingStrings.diffRenderSideBySide(),
      description: SettingStrings.diffRenderSideBySideDescription(),
      type: SettingItemType.Boolean,
      value: 'true',
      category: InputName.TextEditorTab,
    },
    {
      id: 'editor.diffIgnoreTrimWhitespace',
      heading: SettingStrings.diffIgnoreTrimWhitespace(),
      description: SettingStrings.diffIgnoreTrimWhitespaceDescription(),
      type: SettingItemType.Boolean,
      value: 'false',
      category: InputName.TextEditorTab,
    },
    {
      id: 'editor.diffRenderIndicators',
      heading: SettingStrings.diffRenderIndicators(),
      description: SettingStrings.diffRenderIndicatorsDescription(),
      type: SettingItemType.Boolean,
      value: 'true',
      category: InputName.TextEditorTab,
    },
    {
      id: 'editor.diffRenderOverviewRuler',
      heading: SettingStrings.diffRenderOverviewRuler(),
      description: SettingStrings.diffRenderOverviewRulerDescription(),
      type: SettingItemType.Boolean,
      value: 'true',
      category: InputName.TextEditorTab,
    },
    {
      id: 'editor.diffRenderMarginRevertIcon',
      heading: SettingStrings.diffRenderMarginRevertIcon(),
      description: SettingStrings.diffRenderMarginRevertIconDescription(),
      type: SettingItemType.Boolean,
      value: 'true',
      category: InputName.TextEditorTab,
    },
    {
      id: 'editor.insertMode',
      heading: SettingStrings.insertMode(),
      description: SettingStrings.insertModeDescription(),
      type: SettingItemType.Boolean,
      value: 'true',
      category: InputName.TextEditorTab,
    },
    {
      id: 'editor.overwriteMode',
      heading: SettingStrings.overwriteMode(),
      description: SettingStrings.overwriteModeDescription(),
      type: SettingItemType.Boolean,
      value: 'false',
      category: InputName.TextEditorTab,
    },
    {
      id: 'editor.readOnly',
      heading: SettingStrings.readOnly(),
      description: SettingStrings.readOnlyDescription(),
      type: SettingItemType.Boolean,
      value: 'false',
      category: InputName.TextEditorTab,
    },
    {
      id: 'editor.accessibilitySupport',
      heading: SettingStrings.accessibilitySupport(),
      description: SettingStrings.accessibilitySupportDescription(),
      type: SettingItemType.String,
      value: 'auto',
      category: InputName.TextEditorTab,
    },
    {
      id: 'editor.autoIndent',
      heading: SettingStrings.autoIndent(),
      description: SettingStrings.autoIndentDescription(),
      type: SettingItemType.Boolean,
      value: 'true',
      category: InputName.TextEditorTab,
    },
    {
      id: 'editor.bracketMatching',
      heading: SettingStrings.bracketMatching(),
      description: SettingStrings.bracketMatchingDescription(),
      type: SettingItemType.Boolean,
      value: 'true',
      category: InputName.TextEditorTab,
    },
    {
      id: 'editor.centeredLayout',
      heading: SettingStrings.centeredLayout(),
      description: SettingStrings.centeredLayoutDescription(),
      type: SettingItemType.Boolean,
      value: 'false',
      category: InputName.TextEditorTab,
    },
    {
      id: 'editor.columnSelection',
      heading: SettingStrings.columnSelection(),
      description: SettingStrings.columnSelectionDescription(),
      type: SettingItemType.Boolean,
      value: 'false',
      category: InputName.TextEditorTab,
    },
    {
      id: 'editor.contextmenu',
      heading: SettingStrings.contextmenu(),
      description: SettingStrings.contextmenuDescription(),
      type: SettingItemType.Boolean,
      value: 'true',
      category: InputName.TextEditorTab,
    },
    {
      id: 'editor.cursorSmoothCaretAnimation',
      heading: SettingStrings.cursorSmoothCaretAnimation(),
      description: SettingStrings.cursorSmoothCaretAnimationDescription(),
      type: SettingItemType.String,
      value: 'off',
      category: InputName.TextEditorTab,
    },
    {
      id: 'editor.cursorSurroundingLines',
      heading: SettingStrings.cursorSurroundingLines(),
      description: SettingStrings.cursorSurroundingLinesDescription(),
      type: SettingItemType.Number,
      value: '3',
      category: InputName.TextEditorTab,
    },
    {
      id: 'editor.cursorSurroundingLinesStyle',
      heading: SettingStrings.cursorSurroundingLinesStyle(),
      description: SettingStrings.cursorSurroundingLinesStyleDescription(),
      type: SettingItemType.String,
      value: 'all',
      category: InputName.TextEditorTab,
    },
    {
      id: 'editor.disableMonospaceOptimizations',
      heading: SettingStrings.disableMonospaceOptimizations(),
      description: SettingStrings.disableMonospaceOptimizationsDescription(),
      type: SettingItemType.Boolean,
      value: 'false',
      category: InputName.TextEditorTab,
    },
    {
      id: 'editor.emptySelectionClipboard',
      heading: SettingStrings.emptySelectionClipboard(),
      description: SettingStrings.emptySelectionClipboardDescription(),
      type: SettingItemType.Boolean,
      value: 'true',
      category: InputName.TextEditorTab,
    },
    {
      id: 'editor.extraEditorClassName',
      heading: SettingStrings.extraEditorClassName(),
      description: SettingStrings.extraEditorClassNameDescription(),
      type: SettingItemType.String,
      value: '',
      category: InputName.TextEditorTab,
    },
    {
      id: 'editor.fastScrollSensitivity',
      heading: SettingStrings.fastScrollSensitivity(),
      description: SettingStrings.fastScrollSensitivityDescription(),
      type: SettingItemType.Number,
      value: '5',
      category: InputName.TextEditorTab,
    },
    {
      id: 'editor.find',
      heading: SettingStrings.find(),
      description: SettingStrings.findDescription(),
      type: SettingItemType.Boolean,
      value: 'true',
      category: InputName.TextEditorTab,
    },
    {
      id: 'editor.fixedOverflowWidgets',
      heading: SettingStrings.fixedOverflowWidgets(),
      description: SettingStrings.fixedOverflowWidgetsDescription(),
      type: SettingItemType.Boolean,
      value: 'false',
      category: InputName.TextEditorTab,
    },
    {
      id: 'editor.foldingStrategy',
      heading: SettingStrings.foldingStrategy(),
      description: SettingStrings.foldingStrategyDescription(),
      type: SettingItemType.String,
      value: 'auto',
      category: InputName.TextEditorTab,
    },
    {
      id: 'editor.fontLigatures',
      heading: SettingStrings.fontLigatures(),
      description: SettingStrings.fontLigaturesDescription(),
      type: SettingItemType.Boolean,
      value: 'false',
      category: InputName.TextEditorTab,
    },
    {
      id: 'editor.glyphMargin',
      heading: SettingStrings.glyphMargin(),
      description: SettingStrings.glyphMarginDescription(),
      type: SettingItemType.Boolean,
      value: 'true',
      category: InputName.TextEditorTab,
    },
    {
      id: 'editor.gotoLocation',
      heading: SettingStrings.gotoLocation(),
      description: SettingStrings.gotoLocationDescription(),
      type: SettingItemType.String,
      value: 'mouse',
      category: InputName.TextEditorTab,
    },
    {
      id: 'editor.hideCursorInOverviewRuler',
      heading: SettingStrings.hideCursorInOverviewRuler(),
      description: SettingStrings.hideCursorInOverviewRulerDescription(),
      type: SettingItemType.Boolean,
      value: 'false',
      category: InputName.TextEditorTab,
    },
    {
      id: 'editor.hover',
      heading: SettingStrings.hover(),
      description: SettingStrings.hoverDescription(),
      type: SettingItemType.Boolean,
      value: 'true',
      category: InputName.TextEditorTab,
    },
    {
      id: 'editor.inDiffEditor',
      heading: SettingStrings.inDiffEditor(),
      description: SettingStrings.inDiffEditorDescription(),
      type: SettingItemType.Boolean,
      value: 'false',
      category: InputName.TextEditorTab,
    },
    {
      id: 'editor.letterSpacing',
      heading: SettingStrings.letterSpacing(),
      description: SettingStrings.letterSpacingDescription(),
      type: SettingItemType.Number,
      value: '0',
      category: InputName.TextEditorTab,
    },
    {
      id: 'editor.lightbulbEnabled',
      heading: SettingStrings.lightbulbEnabled(),
      description: SettingStrings.lightbulbEnabledDescription(),
      type: SettingItemType.Boolean,
      value: 'true',
      category: InputName.TextEditorTab,
    },
    {
      id: 'editor.lineDecorationsWidth',
      heading: SettingStrings.lineDecorationsWidth(),
      description: SettingStrings.lineDecorationsWidthDescription(),
      type: SettingItemType.Number,
      value: '10',
      category: InputName.TextEditorTab,
    },
    {
      id: 'editor.lineHeight',
      heading: SettingStrings.lineHeight(),
      description: SettingStrings.lineHeightDescription(),
      type: SettingItemType.Number,
      value: '0',
      category: InputName.TextEditorTab,
    },
    {
      id: 'editor.matchBrackets',
      heading: SettingStrings.matchBrackets(),
      description: SettingStrings.matchBracketsDescription(),
      type: SettingItemType.Boolean,
      value: 'true',
      category: InputName.TextEditorTab,
    },
    {
      id: 'editor.minimapEnabled',
      heading: SettingStrings.minimapEnabled(),
      description: SettingStrings.minimapEnabledDescription(),
      type: SettingItemType.Boolean,
      value: 'true',
      category: InputName.TextEditorTab,
    },
    {
      id: 'editor.mouseWheelScrollSensitivity',
      heading: SettingStrings.mouseWheelScrollSensitivity(),
      description: SettingStrings.mouseWheelScrollSensitivityDescription(),
      type: SettingItemType.Number,
      value: '1',
      category: InputName.TextEditorTab,
    },
    {
      id: 'editor.mouseWheelZoom',
      heading: SettingStrings.mouseWheelZoom(),
      description: SettingStrings.mouseWheelZoomDescription(),
      type: SettingItemType.Boolean,
      value: 'false',
      category: InputName.TextEditorTab,
    },
    {
      id: 'editor.multiCursorMergeOverlapping',
      heading: SettingStrings.multiCursorMergeOverlapping(),
      description: SettingStrings.multiCursorMergeOverlappingDescription(),
      type: SettingItemType.Boolean,
      value: 'true',
      category: InputName.TextEditorTab,
    },
    {
      id: 'editor.overviewRulerBorder',
      heading: SettingStrings.overviewRulerBorder(),
      description: SettingStrings.overviewRulerBorderDescription(),
      type: SettingItemType.Boolean,
      value: 'true',
      category: InputName.TextEditorTab,
    },
    {
      id: 'editor.overviewRulerLanes',
      heading: SettingStrings.overviewRulerLanes(),
      description: SettingStrings.overviewRulerLanesDescription(),
      type: SettingItemType.Number,
      value: '3',
      category: InputName.TextEditorTab,
    },
    {
      id: 'editor.peekWidgetDefaultFocus',
      heading: SettingStrings.peekWidgetDefaultFocus(),
      description: SettingStrings.peekWidgetDefaultFocusDescription(),
      type: SettingItemType.String,
      value: 'editor',
      category: InputName.TextEditorTab,
    },
    {
      id: 'editor.quickSuggestionsDelay',
      heading: SettingStrings.quickSuggestionsDelay(),
      description: SettingStrings.quickSuggestionsDelayDescription(),
      type: SettingItemType.Number,
      value: '10',
      category: InputName.TextEditorTab,
    },
    {
      id: 'editor.renderFinalNewline',
      heading: SettingStrings.renderFinalNewline(),
      description: SettingStrings.renderFinalNewlineDescription(),
      type: SettingItemType.Boolean,
      value: 'true',
      category: InputName.TextEditorTab,
    },
    {
      id: 'editor.renderValidationDecorations',
      heading: SettingStrings.renderValidationDecorations(),
      description: SettingStrings.renderValidationDecorationsDescription(),
      type: SettingItemType.Boolean,
      value: 'true',
      category: InputName.TextEditorTab,
    },
    {
      id: 'editor.revealHorizontalRightPadding',
      heading: SettingStrings.revealHorizontalRightPadding(),
      description: SettingStrings.revealHorizontalRightPaddingDescription(),
      type: SettingItemType.Number,
      value: '30',
      category: InputName.TextEditorTab,
    },
    {
      id: 'editor.roundedSelection',
      heading: SettingStrings.roundedSelection(),
      description: SettingStrings.roundedSelectionDescription(),
      type: SettingItemType.Boolean,
      value: 'true',
      category: InputName.TextEditorTab,
    },
    {
      id: 'editor.rulers',
      heading: SettingStrings.rulers(),
      description: SettingStrings.rulersDescription(),
      type: SettingItemType.String,
      value: '[]',
      category: InputName.TextEditorTab,
    },
    {
      id: 'editor.scrollBeyondLastColumn',
      heading: SettingStrings.scrollBeyondLastColumn(),
      description: SettingStrings.scrollBeyondLastColumnDescription(),
      type: SettingItemType.Number,
      value: '5',
      category: InputName.TextEditorTab,
    },
    {
      id: 'editor.scrollbar',
      heading: SettingStrings.scrollbar(),
      description: SettingStrings.scrollbarDescription(),
      type: SettingItemType.String,
      value: 'auto',
      category: InputName.TextEditorTab,
    },
    {
      id: 'editor.scrollPredominantAxis',
      heading: SettingStrings.scrollPredominantAxis(),
      description: SettingStrings.scrollPredominantAxisDescription(),
      type: SettingItemType.Boolean,
      value: 'true',
      category: InputName.TextEditorTab,
    },
    {
      id: 'editor.selectionClipboard',
      heading: SettingStrings.selectionClipboard(),
      description: SettingStrings.selectionClipboardDescription(),
      type: SettingItemType.Boolean,
      value: 'true',
      category: InputName.TextEditorTab,
    },
    {
      id: 'editor.background',
      heading: 'Editor background',
      description: 'Editor background color',
      type: SettingItemType.Color,
      value: '#567567',
      category: InputName.TextEditorTab,
    },
    {
      id: 'editor.showUnused',
      heading: SettingStrings.showUnused(),
      description: SettingStrings.showUnusedDescription(),
      type: SettingItemType.Boolean,
      value: 'true',
      category: InputName.TextEditorTab,
    },
    {
      id: 'editor.snippetSuggestions',
      heading: SettingStrings.snippetSuggestions(),
      description: SettingStrings.snippetSuggestionsDescription(),
      type: SettingItemType.String,
      value: 'bottom',
      category: InputName.TextEditorTab,
    },
    {
      id: 'editor.suggest',
      heading: SettingStrings.suggest(),
      description: SettingStrings.suggestDescription(),
      type: SettingItemType.Boolean,
      value: 'true',
      category: InputName.TextEditorTab,
    },
    {
      id: 'editor.suggestFontSize',
      heading: SettingStrings.suggestFontSize(),
      description: SettingStrings.suggestFontSizeDescription(),
      type: SettingItemType.Number,
      value: '0',
      category: InputName.TextEditorTab,
    },
    {
      id: 'editor.suggestLineHeight',
      heading: SettingStrings.suggestLineHeight(),
      description: SettingStrings.suggestLineHeightDescription(),
      type: SettingItemType.Number,
      value: '0',
      category: InputName.TextEditorTab,
    },
    {
      id: 'editor.suggestSelection',
      heading: SettingStrings.suggestSelection(),
      description: SettingStrings.suggestSelectionDescription(),
      type: SettingItemType.String,
      value: 'recentlyUsed',
      category: InputName.TextEditorTab,
    },
    {
      id: 'editor.useTabStops',
      heading: SettingStrings.useTabStops(),
      description: SettingStrings.useTabStopsDescription(),
      type: SettingItemType.Boolean,
      value: 'true',
      category: InputName.TextEditorTab,
    },
    {
      id: 'editor.wordSeparators',
      heading: SettingStrings.wordSeparators(),
      description: SettingStrings.wordSeparatorsDescription(),
      type: SettingItemType.String,
      value: '`~!@#$%^&*()-=+[{]}\\|;:\'",.<>/?',
      category: InputName.TextEditorTab,
    },
    {
      id: 'editor.wrappingIndent',
      heading: SettingStrings.wrappingIndent(),
      description: SettingStrings.wrappingIndentDescription(),
      type: SettingItemType.String,
      value: 'same',
      category: InputName.TextEditorTab,
    },
  ]
}
